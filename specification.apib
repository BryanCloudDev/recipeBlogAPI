FORMAT: 1A
HOST: http://localhost:3000/api

# Recipes Blog

This is an API for a recipe blog made using express.

# Group Authentication

## Authentication [/login]

### Authenticate user [POST]

Authentication for admin user in order to edit recipes or users.

+ Request (application/json)

        {
            "email": "email@email.com",
            "password": "123456"
        }

+ Response 200 (application/json)

        {
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJicG9ydGlsbG83MDFAZ21haWwuY29tIiwicm9sZSI6MSwiaWF0IjoxNjkwODczMjU3LCJleHAiOjE2OTA4NzY4NTd9.zX6uVck3oed3KXkM4kKYONw_kz9YL4DHZ_iyjw7UQE8"
        }

# Group Recipes

## Recipes [/recipes]

### Create a new recipe [POST]

You may create your own recipe using this action as an admin user using a JWT. It takes a JSON
object containing a recipe title, description, steps and ingredients.

+ Attributes (RecipeCreate)
+ Request (application/json)
    + Headers

            Authorization: Bearer [token]

+ Response 201 (application/json)

    + Attributes (CreatedSuccess)


## Endpoints with parameters [/recipes/{id}]

### Get recipe by ID [GET]

Retrieves a recipe by id.

+ Parameters
    + id: `1` (required, number) - - Recipe id.

+ Response 200 (application/json) 

    + Attributes (RecipeResponse)


### Update recipe by ID [PATCH]

Updates a recipe by id.

+ Parameters
    + id: `1` (required, number) - - Recipe id.

+ Attributes (RecipeResponse)
+ Request (application/json)
    + Headers

            Authorization: Bearer [token]

+ Response 204

### Delete recipe by ID [DELETE]

Deletes a recipe by id.

+ Parameters
    + id: `1` (required, number) - Recipe id.

+ Request (application/json)
    + Headers

            Authorization: Bearer [token]

+ Response 204

## Get all recipes with or without a filter [/recipes{?filter}]

### Get all recipes [GET]

Gets all recipes.

+ Parameters
    + filter (optional, string) - The filter object in JSON format. Example: `filter={"limit":2, "offset":0, "where":{"status": 2}, "select":["firstName"],"order":{"createdOn":"ASC"}}`

+ Response 200 (application/json) 
    + Attributes (array[RecipeResponse])

## Make a search based on text [/recipes/search{?search}]

### Get recipe by custom search [GET]

+ Parameters
    + search: Pizza (required, string) - Search term.

+ Response 200 (application/json)
    + Attributes (array[RecipeResponse])
        
## Upload recipe photo [/recipes/upload/{id}]

### Add or update a recipe photo [PATCH]

Upload a photo to a recipe by id, it has to be sent under the name of "photo", allowed image types are jpeg, jpg, png and gif.


+ Parameters
    + id: `1` (required, number) - Recipe id

+ Request (multipart/form-data)
    + Headers

            Authorization: Bearer [token]

+ Response 200 (application/json)

        {
            "message": "Succesfully uploaded",
            "url": "http://localhost:3000/api/recipes/photo/recipes/d917b131-43e4-443f-a4dd-cb6d78b7693c.jpeg"
        }

# Group Users

## Users [/users]

### Create a new user [POST]

You may register using your email and a password.

+ Attributes (UserCreate)
+ Request (application/json)


+ Response 201 (application/json)

    + Attributes (CreatedSuccess)

## Users [/users/admin]

### Create a new admin user [POST]

You may create a new admin user as an admin user using a JWT.

+ Attributes (UserCreateAdmin)
+ Request (application/json)
    + Headers

            Authorization: Bearer [token]

+ Response 201 (application/json)

    + Attributes (CreatedSuccess)

## Get all users with or without a filter [/users{?filter}]

### Get all users [GET]

Gets all users.

+ Parameters
    + filter (optional, string) - The filter object in JSON format. Example: `filter={"limit":2, "offset":0, "where":{"status": 2}, "select":["firstName"],"order":{"createdOn":"ASC"}}`

+ Response 200 (application/json) 
    + Attributes (array[UserResponse])

## Endpoints with parameters [/users/{id}]

### Delete user by ID [DELETE]

Deletes a user by id.

+ Parameters
    + id: `1` (required, number) - User id.

+ Request (application/json)
    + Headers

            Authorization: Bearer [token]

+ Response 204

### Get a user by ID [GET]

Gets a user by id.

+ Parameters
    + id: `1` (required, number) - User id.

+ Request (application/json)
    + Headers

            Authorization: Bearer [token]

+ Response 200 (application/json) 
    + Attributes (UserResponse)

### Update a user by ID [PATCH]

Updates a user by id.

+ Parameters
    + id: `1` (required, number) - User id.

+ Attributes(UserEdit)
+ Request (application/json)
    + Headers

            Authorization: Bearer [token]

+ Response 204

### Retrieve user profile [GET /users/profile]

Retrieves a user profile using a JWT.

+ Request (application/json)
    + Headers

            Authorization: Bearer [token]

+ Response 200 (application/json) 
    + Attributes (UserResponse)

### Update user password [PATCH /users/password-update]

Updates a user password using the JWT provided.

+ Attributes(PasswordChange)
+ Request (application/json)
    + Headers

            Authorization: Bearer [token]

+ Response 204

### Upload or update a user photo  [PATCH /users/upload/{id}]

Upload a photo to a user by id, it has to be sent under the name of "photo", allowed image types are jpeg, jpg, png and gif.


+ Parameters
    + id: `1` (required, number) - Recipe id

+ Request (multipart/form-data)
    + Headers

            Authorization: Bearer [token]

+ Response 200 (application/json)

        {
            "message": "Succesfully uploaded",
            "url": "http://localhost:3000/api/users/photo/users/d917b131-43e4-443f-a4dd-cb6d78b7693c.jpeg"
        }

# Data Structures

## CreatedSuccess (object)
+ message: Succesfully created (string) - Response
+ id: 1 (number) - ID of the created resource

## RecipeBase (object)
+ title: Ramen Soup (string, required) - The title of the recipe.
+ description: A description (string, required) - The description of the recipe.

## IngredientBase (object)
+ title: ingredient 1 (string, required) - The name of the ingredient.
+ order: 1 (number, required) - The order of the ingredient.

## StepBase (object)
+ title: step 1 (string, required) - The title of the step.
+ order: 1 (number, required) - The order of the step.

## RecipeResponse (object)
+ id: 1 (number, required) - The ID of the recipe.
+ Include RecipeBase
+ status: 1 (number, required) - The status of the recipe.
+ photo: `photo/recipes/b6c38194-9b88-43e5-be4d-9363f92f836a.jpeg` (string, required) - The URL of the recipe photo.
+ createdOn: `2023-07-09T21:07:40.986Z` (string, required) - The creation date of the recipe in ISO 8601 format.
+ updatedOn: `2023-07-31T05:51:46.000Z` (string, required) - The update date of the recipe in ISO 8601 format.
+ step (array[StepResponse]) - The list of steps for the recipe.
+ ingredient (array[IngredientResponse]) - The list of ingredients for the recipe.

## RecipeCreate (object)
+ Include RecipeBase
+ step (array[StepBase]) - The list of steps for the recipe.
+ ingredient (array[IngredientBase]) - The list of ingredients for the recipe.

## StepResponse (object)
+ id: 1 (number, required) - The ID of the step.
+ Include StepBase

## IngredientResponse (object)
+ id: 1 (number, required) - The ID of the ingredient.
+ Include IngredientBase

## UserBase (object)
+ firstName: John (string, required) - The first name of the user.
+ lastName: Doe (string, required) - The last name of the user.
+ birthDate: `2023-07-16T03:01:47.134Z` (string, required) - The birth date of the user in ISO 8601 format.
+ email: email@email.com (string, required) - The email address of the user.

## UserCreate (object)
+ Include UserBase
+ password: mypassword123 (string, required) - The password of the user.

## UserCreateAdmin (object)
+ Include UserCreate
+ roleId(RoleUsers) - Role id

## UserEdit (object)
+ Include UserBase
+ status(StatusUser) - Status for the user
+ roleId(RoleUsers) - Role id

## UserResponse (object)

+ id: 1 (number) - User id
+ Include UserEdit
+ lastLogin: `2023-08-02T19:09:24.000Z` (string) - Last user's login
+ photo: `photo/users/b6c38194-9b88-43e5-be4d-9363f92f836a.jpeg` (string) - The URL of the recipe photo.
+ lastLogin: `2023-08-02T19:09:24.000Z` (string) - Last user's login
+ createdOn: `2023-08-02T19:09:24.000Z` (string) - Account creation date

## StatusUser (enum)
+ 1 (number) - Active
+ 2 (number) - Inactive
+ 3 (number) - Banned

## StatusRecipe (enum)
+ 1 (number) - Active
+ 2 (number) - Inactive

## RoleUsers (enum)
+ 1 (number) - Administrator
+ 2 (number) - User

## PasswordChange (object)
+ currentPassword: 123456 (string, required) - The current password of the user.
+ newPassword: 1234567 (string, required) - The new password that the user wants to set.